use super::syntax::*;
use std::str::FromStr;

grammar;

//     ---------------------------------------------------     //
//                 lalrpop is really epic!                     //
//        util: turn something into a list, either type        //
//     ---------------------------------------------------     //

List<X, Sep>: Vec<X> = {
    X => vec![<>],
    <head:List<X, Sep>> Sep <tail:X> => { let mut head = head; head.push(tail); head }
}

Either<A, B>: Either<A, B> = {
    A => Either::A(<>),
    B => Either::B(<>),
}

//     ---------------------------------------------------     //
//                   start point of a parse                    //
//     ---------------------------------------------------     //

pub Func: Func<LiteralBinder> = {
    "<" <generic:List<LiteralBinder, ",">> ">" "(" <args:List<Arg, ",">> ")"
        "->" <t:Type>
    "{"
        <body:List<Stmt, ";">> ";"
        "return" <expr:Expr> ";"
    "}"
    => Func { generic, args, body, return_expr: expr, return_type: t },

    "<" <generic:List<LiteralBinder, ",">> ">" "(" ")" 
        "->" <t:Type>
    "{" 
        <body:List<Stmt, ";">> ";"
        "return" <expr:Expr> ";"
    "}"
    => Func { generic, args: vec![], body, return_expr: expr, return_type: t },

    "(" <args:List<Arg, ",">> ")"
        "->" <t:Type>
    "{" 
        <body:List<Stmt, ";">> ";"
        "return" <expr:Expr> ";"
    "}"
    => Func { generic: vec![], args, body, return_expr: expr, return_type: t },

    "()"
        "->" <t:Type>
    "{"
        <body:List<Stmt, ";">> ";"
        "return" <expr:Expr> ";"
    "}"
    => Func { generic: vec![], args: vec![], body, return_expr: expr, return_type: t },

    "<" <generic:List<LiteralBinder, ",">> ">" "(" <args:List<Arg, ",">> ")"
        "->" <t:Type>
    "{"
        "return" <expr:Expr> ";"
    "}"
    => Func { generic, args, body: vec![], return_expr: expr, return_type: t },

    "<" <generic:List<LiteralBinder, ",">> ">" "(" ")" 
        "->" <t:Type>
    "{" 
        "return" <expr:Expr> ";"
    "}"
    => Func { generic, args: vec![], body: vec![], return_expr: expr, return_type: t },

    "(" <args:List<Arg, ",">> ")"
        "->" <t:Type>
    "{" 
        "return" <expr:Expr> ";"
    "}"
    => Func { generic: vec![], args, body: vec![], return_expr: expr, return_type: t },

    "()"
        "->" <t:Type>
    "{"
        "return" <expr:Expr> ";"
    "}"
    => Func { generic: vec![], args: vec![], body: vec![], return_expr: expr, return_type: t },
}

Arg : Arg<LiteralBinder> = {
    <bind: LiteralBinder> ":" <ty: Type>
        => Arg(bind, ty)
}

Stmt: Stmt<LiteralBinder> = {
    "let" <bind:LiteralBinder> "=" <expr:Expr>
        => Stmt::LetIn { bind, expr, ty: None },
    "let" <bind:LiteralBinder> ":" <ty:Type> "=" <expr:Expr>
        => Stmt::LetIn { bind, expr, ty: Some(ty) },
}

//     ---------------------------------------------------     //
//               expression-related definitions                //
//     ---------------------------------------------------     //

Expr = { ExprLevel0 }

// ArrBuild
ExprLevel0: Expr<LiteralBinder> = {
    "[" <bind:List<LiteralBinder, ",">> "]" "->" <expr:Expr>
        => Expr::ArrBuild { bind, expr: Box::new(expr) },
    ExprLevel1,
}

// Add, Sub
ExprLevel1: Expr<LiteralBinder> = {
    <lhs:ExprLevel1> "+" <rhs:ExprLevel2> => 
        Expr::BinOps { ops: BinOps::Add, lhs: Box::new(lhs), rhs: Box::new(rhs) },
    <lhs:ExprLevel1> "-" <rhs:ExprLevel2> => 
        Expr::BinOps { ops: BinOps::Sub, lhs: Box::new(lhs), rhs: Box::new(rhs) },
    ExprLevel2
}

// Mul, Div
ExprLevel2: Expr<LiteralBinder> = {
    <lhs:ExprLevel2> "*" <rhs:ExprLevel3> 
        => Expr::BinOps { ops: BinOps::Mul, lhs: Box::new(lhs), rhs: Box::new(rhs) },
    <lhs:ExprLevel2> "/" <rhs:ExprLevel3>
        => Expr::BinOps { ops: BinOps::Div, lhs: Box::new(lhs), rhs: Box::new(rhs) },
    ExprLevel3
}


// ArrIndex, SetBuild
ExprLevel3: Expr<LiteralBinder> = {
    "(" <expr:Expr> ")" => expr,

    <bind:LiteralBinder> => Expr::Bind(bind),

    <func:LiteralBinder> "(" <args:List<Expr, ",">> ")" => Expr::Call{ func, args },

    <func:LiteralBinder> "(" ")" => Expr::Call{ func, args: vec![] },

    <arr:ExprLevel3> "[" <idx:List<Expr, ",">> "]"
        => Expr::ArrIndex { arr: Box::new(arr), idx },

    "{" <expr:Expr> ":" <bind:List<LiteralBinder, ",">> "where" <cond:Expr> "}"
        => Expr::SetBuild { expr: Box::new(expr), bind, cond: Box::new(cond) },
}

//     ---------------------------------------------------     //
//                 LiteralBinder-related definitions                  //
//     ---------------------------------------------------     //

LiteralBinder: LiteralBinder = { 
    r"[A-Za-z_][A-Za-z0-9_]*"
        => LiteralBinder(<>.to_string()),
}

//     ---------------------------------------------------     //
//                  literal-related definitions                //
//     ---------------------------------------------------     //

Int: usize = { r"[0-9]+" => usize::from_str_radix(<>, 10).unwrap() }
Flt: f32 = { r"[0-9]+\.[0-9]+" => f32::from_str(<>).unwrap() }

//     ---------------------------------------------------     //
//                   type-related definitions                  //
//     ---------------------------------------------------     //

Type = { Scalar, Array }

Scalar: Type<LiteralBinder> = {
    "f32" => Type::F32,
    "f64" => Type::F64,
    "i32" => Type::I32,
    "i64" => Type::I64,
    "bool" => Type::Bool,
}

Array: Type<LiteralBinder> = {
    "[" <shape:List<Either<Int, LiteralBinder>, ",">> ";" <t:Type> "]" => Type::Arr(shape, Box::new(t)),
}